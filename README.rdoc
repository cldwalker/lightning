== Description
TODO

== Intro
Lightning generates shell functions which can interpret paths by their basenames. So instead of carpal-typing

  $ less /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/irb.rb

just type

  $ less-ruby irb.rb

less-ruby is a lightning function which wraps `less` with the ability to refer to system ruby files by their basenames. Being a lightning function, it can also autocomplete system ruby files:

  # 1112 available system ruby files
  $ less-ruby [TAB]
  Display all 1112 possibilities? (y or n)

  $ less-ruby a[TAB]
  abbrev.rb                  abstract.rb                abstract_index_builder.rb
  $ less-ruby abb[TAB]
  $ less-ruby abbrev.rb
  # Pages /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/abbrev.rb ...

  # Autocompletion works regardless of the number of arguments
  $ less-ruby -I abbrev.rb y[TAB]
  yaml.rb      yamlnode.rb  ypath.rb
  $ less-ruby -I abbrev.rb yp[TAB]
  $ less-ruby -I abbrev.rb ypath.rb
  # Pages /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/abbrev.rb and
    /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/yaml/ypath.rb ...

And here's the one-liner that creates this function:

  $ lightning function create less ruby && lightning-reload

== Install

Install with either rip or rubygems:
  $ rip install git://github.com/cldwalker/lightning.git
  # OR
  $ sudo gem install lightning

If you've installed with rubygems and `time lightning` takes longer than 0.05 seconds, I *strongly recommend* installing with rip. Your startup time directly effects your autocompletion speed with lightning.

Once lightning is installed, we need to do a one-time setup:

  # To see available install options
  $ lightning install -h

  # Installs lightning's core files and sources the needed lightning functions
  $ lightning install && source ~/.lightning/functions.sh
  Created ~/.lightning_yml
  Created ~/.lightning/functions.sh

  # To have lightning's functionality loaded when your shell starts up
  echo source ~/.lightning/functions.sh >> ~/.bashrc
  # or for zsh
  echo source ~/.lightning/functions.sh >> ~/.zshrc

== Globbable Paths

Since the globbable paths are interpreted by ruby's Dir.glob(), you can:

1. Autocomplete files and directories that don't start with specific letters.

   Dir.glob("[^ls]*") -> Matches anything not starting with l or s

2. Autocomplete files ending with specific file extensions for a given directory.

   Dir.glob("/painfully/long/path/*.{rb,erb}") -> Matches files ending with .rb or .erb

3. Autocomplete all directories however many levels deep under the current directory.

   Dir.glob("**/")

`ri Dir.glob` for more examples.

== Configuration
It helps to look at lightning.yml.example while reading this.

Configuration options are:

* source_file: Location of shell script file generated from config. Defaults to
  ~/.lightning/functions.sh
* ignore_paths: List of paths to globally ignore when listing completions.
* complete_regex: true or false (default is true)
  Turns on/off Ruby regular expression matching when completing. One convenience
  is that a '*' is converted to '.*' ie glob-like behavior.

  Note: Realize your regular expression normally just match the basename. However, since duplicates
  list their full paths, their full paths are subject to regex matching.
* shell: Specifies shell script generator used for generating completions. Defaults to bash.
* bolts: Array of bolts with each bolt being a hash with the following keys:
  * name(required): Unique name
  * globs(required): Array of globs which defines group of paths bolt handles
  * post_path: Text to add immediately after a resolved path
  * functions: A list of lightning functions. A lightning function is just a shell function
    which executes a shell command with a defined set of paths to autocomplete on.
    A function consists of the following options/keys:
    * name: Name of the lightning function you'll be typing.
    * shell_command(required): Shell command which the lightning command passes arguments to.
    * aliases: A hash (pairs) of custom aliases and full paths only for this command.

== Limitations
Only bash and zsh shells are supported. Patches are welcome to extend support to other shells.

== Credits
* ryanb's dotfiles inspired tinkering with autocompletion in ruby: http://github.com/ryanb/dotfiles/blob/master/bash/completion_scripts/project_completion
* defunkt's rip, http://github.com/defunkt/rip, was inflential in designing plugins

== Todo
* Manpage
* An irb builder with bond
