lightning(1) -- Speed for your shell
====================================

## SYNOPSIS

    lightning [-h|--help] [-v|--version] COMMAND [ARGS]

## DESCRIPTION

`lightning` is a commandline framework that lets users wrap commands with shell functions that are able to refer (translate) to any filesystem path by its basename. To achieve this, a group of paths to be translated are defined with shell globs. These shell globs, known as a lightning _bolt_, are then applied to commands to produce functions. In addition to translating basenames to full paths, lightning _functions_ can autocomplete these basenames, resolve conflicts if they have the same name, leave any non-basename arguments untouched, and autocomplete directories above and below a basename.

To make bolts shareable between users and functions easier to create, `lightning` has _generators_. A _generator_ generates filesystem-specific globs for a bolt. `lightning` comes with some default generators. Users can make their own generators with generator plugins placed under ~/.lightning/generators/.

## COMMANDS

`lightning` comes with the following commands, some which have subcommands. Commands and subcommands can be abbreviated i.e. 'function create grep ruby' -> 'f c grep ruby'. Users can define their own commands by placing command plugins under ~/.lightning/commands/.

* `bolt`:
  Commands for managing bolts. Defaults to listing them.
* `complete`:
  Prints a function's completions based on the last argument.

* `function`:
  Commands for managing functions. Defaults to listing them.
* `generator`:
  Lists available generators.
* `install`:
  Builds shell functions and installs them into FILE to be sourced by shell.
* `shell_command`:
  Commands for managing shell commands. Defaults to listing them.
* `translate`:
  Translates each argument and prints it on a separate line.

## CREATE FUNCTIONS

There are two nonexclusive ways of creating functions. The first involves combining bolts with individual shell commands. Here are the steps involved:

* Create a bolt with shell globs. This step can be skipped if a bolt has a generator with the same name.
    # Globs are quoted to prevent filename expansion.
    $ lightning bolt create code '~/code/fork/\*' '~/code/gems/\*'
    Created bolt 'code'

* Create function(s) for that bolt by applying to shell commands.
    $ lightning function create cd code
    Created function 'cd-code'
    $ lightning function create grep code
    Created function 'grep-code'
* Generate and load functions into shell
    $ lightning-reload
    Created ~/.lightning/function.sh
    Loaded ~/.lightning/function.sh

The second, more brute-force way of creating functions is to make global functions. Global functions are made from combining each global bolt with each global shell command. For example, 4 global bolts combined with 7 global commands will make 28 global functions.

  # First make bolts global since bolts aren't global by default
  $ lg bolt global on python clojure ruby
  Global on for bolts python, clojure, ruby

  # Then add the global commands
  $ lg shell_command create vim
  Created shell command 'vim'
  $ lg shell_command create grep
  Created shell command 'grep'
  $ lightning-reload

  # Verify global functions
  $ lightning function list
  grep-clojure
  grep-python
  grep-ruby
  vim-clojure
  vim-python
  vim-ruby

## LIGHTNINGRC

`lightning`'s configuration is stored in ~/.lightningrc as YAML. Since it's human readable it's easy to modify. However, `lightning` depends on this file to function and will fail if the file has a syntax error. Modifying this file is only recommended if you need to modify existing functions, bolts or global commands in a way that the lightning commands can't. To read up on the config file format see _http://tagaholic.me/lightning/doc/Lightning/Config.html_.

## INSTALLATION

Install with either rip or rubygems:
  $ rip install git://github.com/cldwalker/lightning.git
  # OR
  $ sudo gem install yard # to install documentation correctly
  $ sudo gem install lightning

If you've installed with rubygems and the command `time lightning` takes longer than 0.05 seconds, I *strongly recommend* installing with rip, http://hellorip.com. Your startup time directly effects your autocompletion speed with lightning.

Once lightning is installed, we need to do a one-time setup:

  # To see available install options
  $ lightning install -h

  # Installs lightning's core files
  $ lightning install && source ~/.lightning/functions.sh
  Created ~/.lightning_yml
  Created ~/.lightning/functions.sh

  # To have lightning's functionality loaded when your shell starts up
  echo source ~/.lightning/functions.sh >> ~/.bashrc
  # or for zsh
  echo source ~/.lightning/functions.sh >> ~/.zshrc

## EXAMPLES

Get help on any command:

  $ lightning function -h
  $ lightning bolt -h

List functions:

  # All functions
  $ lightning function list
  # All functions from ruby bolt
  $ lightning function list --bolt=ruby
  # All functions from global command echo
  $ lightning function list --command=echo

Regenerate functions and source them into the shell:

  # Call every time for changes to bolts and functions to take effect
  $ lightning-reload

Manage global shell commands:

  $ lightning shell_command list
  $ lightning shell_command create cd
  $ lightning shell_command delete cd

Manage/edit bolts:

  $ lightning bolt list
  $ lightning bolt delete ruby
  $ lightning bolt alias ruby r
  $ lightning bolt global off ruby gem local_ruby

Generate a bolt using a generator:

  # Generates ruby bolt with ruby generator
  $ lightning bolt generate ruby
  # Generates ruby19 bolt with ruby generator
  $ lightning bolt generate ruby19 ruby
  # Test what ruby bolt generates
  $ lightning bolt generate ruby --test

Test what a function will execute:

  # Normal execution
  $ cp-gem -r rubygems-update-1.3.6 .
  # Prints cp-gem's translated arguments, one per line
  $ lightning translate cp-gem -r rubygems-update-1.3.6 .
  -r
  /Library/Ruby/Gems/1.8/gems/rubygems-update-1.3.6
  .

## BUGS

Please report bugs at _http://github.com/cldwalker/lightning/issues_.

## COPYRIGHT

`lightning` is Copyright (C) 2010 Gabriel Horner

## SEE ALSO

<http://tagaholic.me/lightning>, <http://tagaholic.me/lightning/doc/>, <http://github.com/cldwalker/lightning>